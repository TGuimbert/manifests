---
name: build

on:
  push:

permissions:
  packages: write    # needed for ghcr.io access
  id-token: write    # needed for keyless signing

env:
  oci_repo: "ghcr.io/tguimbert/manifests/dark"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Nix Store
        id: cache-nix-store
        uses: actions/cache@v3
        with:
          path: ~/nix
          key: ${{ runner.os }}-nix-store
      - name: Install Nix
        uses: cachix/install-nix-action@v20
      - name: Create folder for manifests
        run: mkdir manifests
      - name: Build manifests
        run: |
          nix develop --quiet --store ~/nix \
          --command kustomize build ./sources/dark/ --output manifests/
      - name: Run full kyverno tests
        run: |
          nix develop --quiet --store ~/nix \
          --command kyverno apply policies/ --resource manifests/ \
          --policy-report
      - name: Run kyverno tests for summary
        run: |
          nix develop --quiet --store ~/nix \
          --command kyverno apply policies/ --resource manifests/ \
          2> /dev/null >> "$GITHUB_STEP_SUMMARY"

  push:
    if: github.ref == 'refs/tags/*'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push manifests to GHCR
        id: push
        run: |
          echo digest="$(kustomize build ./source/dark | flux push artifact \
          oci://${{ env.oci_repo }}:${{ github.ref_name }} \
          --path= - \
          --source=${{ github.repositoryUrl }} \
          --revision='${{ github.ref_name }}@sha1:${{ github.sha }}' \
          --output json | \
          jq -r '. | .digest')" >> "$GITHUB_OUTPUT"
      - name: Sign manifests in GHCR with Cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.oci_repo}}@${{ steps.push.outputs.digest }}
